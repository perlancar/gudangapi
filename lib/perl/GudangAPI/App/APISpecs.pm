package GudangAPI::App;

use 5.0.10;
our %api_specs;

# Generated by: devscripts/cache-api-specs 
# Date: Fri May 20 12:19:59 2011
# List all API specs from all GudangAPI::API::* modules

%api_specs = do {
  my $b = {
    functions => {
      convert_id_phrase_to_num => {
        spec => {
          _module     => "number::phrase::id",
          args        => {
                           phrase => [
                             "str*",
                             { summary => "Frase yang ingin diterjemahkan menjadi angka" },
                           ],
                         },
          description => "\nFungsi ini adalah kebalikan fungsi 'terbilang', yaitu mengubah terbilang menjadi\nangka. Salah satu aplikasi fungsi ini adalah untuk parsing bahasa atau untuk\nmelakukan ricek apakah sebuah ungkapan terbilang sama dengan angkanya.\n\n* Hasil:\n\nAngka. Jika frase tidak dapat diparsing, kode status 400 akan dikembalikan.\n\n* Catatan:\n\nJika Anda memasukkan kata-kata yang tidak masuk akal (tidak sesuai kaidah bahasa\nIndonesia), fungsi ini mungkin masih mengembalikan angka tapi yang tidak masuk\nakal pula.\n\n* Contoh:\n\n  convert_id_phrase_to_num(phrase=>'seratus koma tiga') -> [200, \"OK\", 100.3]\n\n* Lihat juga:\n\nFungsi convert_num_to_id_phrase() (alias terbilang()).\n\n",
          features    => { pure => 1 },
          name        => "dari_terbilang",
          summary     => "Konversi frase bahasa Indonesia (terbilang) menjadi angka",
        },
      },
      convert_num_to_id_phrase => {
        spec => {
          _module     => "number::phrase::id",
          args        => {
                           num => [
                                    "float*",
                                    { summary => "Angka yang ingin diterjemahkan menjadi frase" },
                                  ],
                         },
          description => "\nFungsi ini mengonversi angka menjadi frase dalam bahasa Indonesia, lazim disebut\n'terbilang'.\n\n* Hasil:\n\nAngka. Jika frase tidak dapat diparsing, kode status 400 akan dikembalikan.\n\n* Catatan:\n\nJika Anda memasukkan kata-kata yang tidak masuk akal (tidak sesuai kaidah bahasa\nIndonesia), fungsi ini mungkin masih mengembalikan angka tapi yang tidak masuk\nakal pula.\n\n* Contoh:\n\n  convert_num_to_id_phrase(num=>203) -> [200, \"OK\", \"dua ratus tiga\"]\n\n* Lihat juga:\n\nFungsi convert_id_phrase_to_num() (alias dari_terbilang() untuk kebalikannya,\nmengubah frase bahasa Indonesia menjadi terbilang).\n\n",
          features    => { pure => 1 },
          name        => "terbilang",
          summary     => "Konversi angka menjadi frase bahasa Indonesia (terbilang)",
        },
      },
      dari_terbilang => { spec => 'fix' },
      terbilang => { spec => 'fix' },
    },
  };
  $b->{functions}{dari_terbilang}{spec} = $b->{functions}{convert_id_phrase_to_num}{spec};
  $b->{functions}{terbilang}{spec} = $b->{functions}{convert_num_to_id_phrase}{spec};
  (
    "number::phrase::id",
    $b,
    "finance::currency::id::bca",
    {
      functions => {
        get_bca_exchange_rate => {
          spec => {
            _module     => "finance::currency::id::bca",
            args        => {
                             amount => [
                                         "float*",
                                         { default => 1, summary => "Jumlah yang ingin dikonversi" },
                                       ],
                             from   => ["str*", { summary => "Simbol mata uang tujuan" }],
                           },
            description => "\nIni adalah versi permulaan, API masih mungkin akan berubah. Baru USD dan IDR\nyang didukung. Update data setiap 15 menit sekali. Akan tersedia juga fungsi\nget_id_exchange_rate() yang akan mengambil dari beberapa sumber di Indonesia\n(seperti situs Dirjen Pajak dan BI).\n\n* Hasil yang dikembalikan:\n\nSebuah array asosiatif (hash) yang berisi key-key berikut:\n\n sell                   Nilai kurs jual\n buy                    Nilai kurs beli\n spread                 Selisih kurs jual dan beli (sell-buy)\n average                Rata-rata kurs jual dan beli ((sell+buy)/2)\n mtime                  Waktu update data terakhir (dalam Unix time)\n mtime_str              Waktu update data terakhir (dalam format string)\n\n* Contoh:\n\nUntuk mengetahui berapa nilai \$100 dalam rupiah saat ini:\n\n get_bca_exchange_rate_phrase(from=>'USD', to=>'IDR', amount=>100)\n\nakan menghasilkan respon (dalam JSON):\n\n [200, \"OK\",\n {\"sell\": 867500,\n  \"buy\": 842500,\n  \"average\": 855000,\n  \"spread\": 25000,\n  \"mtime\": 1305867737}]\n\n* Lihat juga:\n\n",
            features    => {},
            name        => "get_bca_exchange_rate",
            summary     => "Mengambil kurs mata uang dari BCA (klikbca.com)",
          },
        },
      },
    },
    "tax::id::npwp",
    {
      functions => {
        parse_npwp    => {
                           spec => {
                             _module     => "tax::id::npwp",
                             args        => { npwp => ["str*", { summary => "Nomor yang ingin dicek" }] },
                             description => "\nFungsi ini memparsing nomor pokok wajib pajak ke dalam elemen-elemennya.\n\n* Hasil yang dikembalikan: array asosiatif berisi key-key berikut:\n\n Nama                       Penjelasan\n ----                       ----------\n normalized                 Nomor dalam format baku\n pretty                     Nomor dalam format cantik\n\n taxpayer_code              Kode WP (wajib pajak) 2 digit\n serial                     Kode seri 6 digit\n check_digit                Kode cek 1 digit\n local_tax_office_code      Kode KPP (kantor wajib pajak) 3 digit\n branch_code                Kode cabang WP\n\n* Contoh:\n\n parse_npwp(npwp=>'02.183.241.5-400.001')\n\nhasilnya adalah (dalam JSON):\n\n [\n  200,\n  \"OK\",\n  {\"normalized\":\"02.183.241.5-400.001\",\n   \"pretty\":\"02.183.241.5-400.001\",\n   \"taxpayer_code\":\"02\",\n   \"serial\":\"183241\",\n   \"check_digit\":\"5\",\n   \"local_tax_office_code\":\"400\",\n   \"branch_code\":\"001\"}\n ]\n\n* Lihat juga: validate_npwp()\n\n",
                             features    => { pure => 1 },
                             name        => "parse_npwp",
                             summary     => "Parsing NPWP (nomor pokok wajib pajak)",
                           },
                         },
        validate_npwp => {
                           spec => {
                             _module     => "tax::id::npwp",
                             args        => { npwp => ["str*", { summary => "Nomor yang ingin dicek" }] },
                             description => "\nFungsi ini mengecek apakah sintaks/format nomor kode wajib pajak (NPWP) adalah\nvalid. Catatan: fungsi ini hanya mengecek sintaks dan tidak benar-benar\nmemeriksa ke database kantor pajak apakah sebuah NPWP dipakai/tidak.\n\n* Hasil yang dikembalikan:\n\nJika valid, fungsi akan mengembalikan kode 200. Jika tidak valid, kode 400 akan\ndikembalikan dan pesan kesalahan akan berisi detil mengapa NPWP tidak valid.\n\n* Contoh:\n\n  validate_npwp(npwp=>'00.000.001.8-000') -> [200, \"OK\"]\n  validate_npwp(npwp=>'00.000.000.8-000') -> [400, \"Invalid NPWP: zero serial\"]\n\n* Lihat juga: parse_npwp() untuk memparsing NPWP ke dalam elemen-elemennya.\n\n",
                             features    => { pure => 1 },
                             name        => "validate_npwp",
                             summary     => "Validasi NPWP (nomor pokok wajib pajak)",
                           },
                         },
      },
    },
  );
};
1;
